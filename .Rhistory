install.packages("dupradar")
install.packages("dupRadar")
install.packages("dupRadar")
source("https://bioconductor.org/biocLite.R")
biocLite("dupRadar")
library(dupRadar)
library(dupRadar)
data(dupRadar_examples)
bam <- system.file("extdata",
"wgEncodeCaltechRnaSeqGm12878R1x75dAlignsRep2V2_duprm.bam",
package="dupRadar")
gtf <- system.file("extdata","genes.gtf",package="dupRadar")
stranded <- 2 # '0' (unstranded), '1' (stranded) and '2' (reverse)
paired <- FALSE
threads <- 4
dm <- analyzeDuprates(bam,gtf,stranded,paired,threads)
fm
dm
attach(dupRadar_examples)
cumulativeDuprateBarplot(DupMat=dm)
duprateExpBoxplot(DupMat=dm)
duprateExpDensPlot
library("Rsamtools")
p0 <- ScanBamParam()
which <- RangesList(seq1=IRanges(1000, 2000),
seq2=IRanges(c(100, 1000), c(1000, 2000)))
p1 <- ScanBamParam(what=scanBamWhat(), which=which)
p1
p2 <- ScanBamParam(what=scanBamWhat(),
flag=scanBamFlag(isMinusStrand=FALSE))
p2
p3 <- ScanBamParam(what=c("rname", "strand", "pos", "qwidth"))
fl <- system.file("extdata", "ex1.bam", package="Rsamtools",
mustWork=TRUE)
res <- scanBam(fl, param=p2)[[1]]
lapply(res, head)
p4 <- ScanBamParam(tag=c("NM", "H1"), what="flag")
bam4 <- scanBam(fl, param=p4)
str(bam4[[1]][["tag"]])
p5 <- ScanBamParam(tag=c("NM", "H1"), tagFilter=list(NM=c(2, 3, 4)))
bam5 <- scanBam(fl, param=p5)
table(bam5[[1]][["tag"]][["NM"]])
p3
scanBam(fl, param=p3)[[1]]
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
param = ScanBamParam()
bamFlag(param) = scanBamFlag(isUnmappedQuery = TRUE)
cb = countBam(bamfile, param=param)[[1]]$qname
countBam(bamfile, param=param)[[1]]
p2 <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = TRUE))
cb = countBam(bamfile, param=p2)[[1]]$qname
cb = countBam(bamfile, param=p2)[[1]]
cb
cb = scanBam(bamfile, param=p2)[[1]]
cb
cb$qname
cb
attach(dupRadar_examples)
dm <- analyzeDuprates(bamDuprm,gtf,stranded,paired,threads)
dm <- analyzeDuprates(bamDuprm,gtf,stranded,paired,threads)
data(dupRadar_examples)
dm <- analyzeDuprates(bamDuprm,gtf,stranded,paired,threads)
bam <- system.file("extdata","sample1Aligned.out.bam",package="dupRadar")
gtf <- "genes.gtf"
stranded <- 2 # '0' (unstranded), '1' (stranded) and '2' (reverse)
paired <- FALSE
threads <- 4
bamDuprm <- markDuplicates(dupremover="bamutil",bam,
path="/opt/bamUtil-master/bin",rminput=FALSE)
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p2 <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
cb = scanBam(bamfile, param=p2)[[1]]$qname
cb
cb = scanBam(bamfile, param=p2)[[1]]
cb
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
cb = scanBam(bamfile, param=p_cig)[[1]]$cigar
cb
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cb = scanBam(bamfile, param=p_cig)[[1]]$cigar
cb
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
in_size = scanBam(bamfile, param=p_cig)[[1]]$isize
in_size
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE))
in_size = scanBam(bamfile, param=p_cig)[[1]]$isize
in_size
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_ins <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE,isProperPair = TRUE))
in_size = scanBam(bamfile, param=p_ins)[[1]]$isize
in_size
library(dupRadar)
bam <- system.file("extdata","sample1Aligned.out.bam",package="dupRadar")
gtf <- "genes.gtf"
stranded <- 2 # '0' (unstranded), '1' (stranded) and '2' (reverse)
paired <- FALSE
threads <- 4
bamDuprm <- markDuplicates(dupremover="bamutil",bam,
path="/opt/bamUtil-master/bin",rminput=FALSE)
mapq <- scanBam(bamfile, param=p_ins)[[1]]
mapq <- scanBam(bamfile, param=p_ins)[[1]]
mapq
mapq <- scanBam(bamfile, param=p_ins)[[1]]$mapq
knitr::opts_chunk$set(echo = TRUE)
library(Rsamtools)
library(dupRadar)
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
uniq_map_r = scanBam(bamfile, param=p_cig)[[1]]
uniq_map <- uniq_map_r[uniq_map_r$mapq>30]
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
uniq_map_r = scanBam(bamfile, param=p_cig)[[1]]
uniq_map <- uniq_map_r[uniq_map_r$mapq>30]
head(uniq_map)
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map <- uniq_map_r[uniq_map_r$mapq>30]
head(uniq_map)
uniq_map$mapq
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map <- uniq_map_r[uniq_map_r$mapq>30]
uniq_map$mapq
uniq_map_r
class(uniq_map_r)
lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>30])
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>30])
any(uniq_map$mapq<=30)
p_mm <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
mult_map_r = scanBam(bamfile, param=p_mm)[[1]]
mult_map  <- lapply(mult_map_r, function(x)x[mult_map_r$mapq<=30])
any(mult_map$mapq<=30)
unmapped_reads <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p2 <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = TRUE))
ur = scanBam(bamfile, param=p2)[[1]]$qname
return(ur)
}
unmapped_reads
unmapped_reads <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p2 <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = TRUE))
ur = scanBam(bamfile, param=p2)[[1]]$qname
return(ur)
}
unmapped_reads()
cigar_prof <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cb = scanBam(bamfile, param=p_cig)[[1]]$cigar
}
cigar_prof <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cb = scanBam(bamfile, param=p_cig)[[1]]$cigar
}
cigar_prof()
cigar_prof <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cigar = scanBam(bamfile, param=p_cig)[[1]]$cigar
return(cigar)
}
cigar_prof()
cigar_prof <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cigar = scanBam(bamfile, param=p_cig)[[1]]$cigar
return(cigar)
}
head(cigar_prof())
insert_size <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_ins <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE,isProperPair = TRUE))
in_size = scanBam(bamfile, param=p_ins)[[1]]$isize
insert_size
insert_size <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_ins <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE,isProperPair = TRUE))
in_size = scanBam(bamfile, param=p_ins)[[1]]$isize
return(in_size)
}
insert_size
insert_size <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_ins <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE,isProperPair = TRUE))
in_size = scanBam(bamfile, param=p_ins)[[1]]$isize
return(in_size)
}
insert_size()
insert_size <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_ins <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isPaired = TRUE,isProperPair = TRUE))
in_size = scanBam(bamfile, param=p_ins)[[1]]$isize
return(in_size)
}
head(insert_size())
bamcoverage <- function (bamfile) {
# read in the bam file
bam <- scanBam(bamfile)[[1]] # the result comes in nested lists
# filter reads without match position
ind <- ! is.na(bam$pos)
## remove non-matches, they are not relevant to us
bam <- lapply(bam, function(x) x[ind])
ranges <- IRanges(start=bam$pos, width=bam$qwidth, names=make.names(bam$qname, unique=TRUE))
## names of the bam data frame:
## "qname"  "flag"   "rname"  "strand" "pos"    "qwidth"
## "mapq"   "cigar"  "mrnm"   "mpos"   "isize"  "seq"    "qual"
## construc: genomic ranges object containing all reads
ranges <- GRanges(seqnames=Rle(bam$rname), ranges=ranges, strand=Rle(bam$strand), flag=bam$flag, readid=bam$rname )
## returns a coverage for each reference sequence (aka. chromosome) in the bam file
return (mean(coverage(ranges)))
}
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_chrom <- ScanBamParam(what=c("rname","pos"),flag=scanBamFlag(isUnmappedQuery = TRUE))
chromosome = scanBam(bamfile, param=p_chrom)[[1]]
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_chrom <- ScanBamParam(what=c("rname","pos"),flag=scanBamFlag(isUnmappedQuery = TRUE))
chromosome = scanBam(bamfile, param=p_chrom)[[1]]
chromosome
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_chrom <- ScanBamParam(what=c("rname","pos"))
chromosome = scanBam(bamfile, param=p_chrom)[[1]]
chromosome
map_qua <- function(){
bamfile<- system.file("extdata", "ex1.bam", package="Rsamtools",mustWork=TRUE)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
mapq = scanBam(bamfile, param=p_cig)[[1]]$mapq
return(mapq)
}
map_qua()
libray(roxygen)
libray(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
bam <-scanBam(bamfile)[[1]]
p_cover <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
mapq = scanBam(bamfile, param=p_cover)[[1]]$pos
mapq
p <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
scanBam(bamfile, param=p_)[[1]]$pos
scanBam(bamfile, param=p)[[1]]$pos
p_cover <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
bam = scanBam(bamfile, param=p_cover)[[1]]
ranges <- IRanges(start=bam$pos, width=bam$qwidth, names=make.names(bam$qname, unique=TRUE))
ranages
ranges
G_ranges <- GRanges(seqnames=Rle(bam$rname), ranges=I_ranges, strand=Rle(bam$strand), flag=bam$flag, readid=bam$rname)
I_ranges <- IRanges(start=bam$pos, width=bam$qwidth, names=make.names(bam$qname, unique=TRUE))
G_ranges <- GRanges(seqnames=Rle(bam$rname), ranges=I_ranges, strand=Rle(bam$strand), flag=bam$flag, readid=bam$rname)
coverage(G_ranges)
mean(coverage(G_ranges))
rbind(mean(coverage(G_ranges)),median(coverage(G_ranges)),sd(coverage(G_ranges)))
coverage <- rbind(mean(coverage(G_ranges)),median(coverage(G_ranges)),sd(coverage(G_ranges)))
rownames(coverage)
rownames(coverage) <- c("mean","median","sd")
coverage
roxygen2::roxygenise()
roxygen2::roxygenise()
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
quality =30
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
uniq_map
dim(uniq_map)
str(uniq_map)
p_total <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
bam_total <- scanBam(bamfile, param=p_total)[[1]]
bam_total
bam_length <- function(bamfile){
p_total <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
bam_total <- scanBam(bamfile, param=p_total)[[1]]
return(length(bam_total$qname))
}
bam_length(bamfile)
unq_map <- function(bamfile,quality=30,option){
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
length <- bam_length(bamfile)
if (option = "count") return(length(uniq_map$qname))
if (option = "rate") return(length(uniq_map$qname)/length)
}
unq_map <- function(bamfile,quality=30,option){
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
length <- bam_length(bamfile)
if (option == "count") return(length(uniq_map$qname))
if (option == "rate") return(length(uniq_map$qname)/length)
}
unq_map(bamfile,30, option="count")
unq_map(bamfile,30, option="rate")
mult_map <- function(bamfile,quality=30,option){
p_mm <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
mult_map_r = scanBam(bamfile, param=p_mm)[[1]]
mult_map  <- lapply(mult_map_r, function(x)x[mult_map_r$mapq<=quality])
length <- bam_length(bamfile)
if (option == "count") return(length(mult_map$qname))
if (option == "rate") return(length(mult_map$qname)/length)
}
mult_map(bamfile, 30, "count")
mult_map(bamfile, 30, "rate")
bam_length <- function(bamfile){
p_total <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
bam_total <- scanBam(bamfile, param=p_total)[[1]]
return(length(bam_total$qname))
}
unq_map <- function(bamfile,quality=30,option){
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
length <- bam_length(bamfile)
if (option == "count") return(length(uniq_map$qname))
if (option == "rate") return(length(uniq_map$qname)/length)
}
unq_map(bamfile,30, option="count")
mult_map(bamfile, 30, "rate")
unq_map <- function(bamfile,quality=30,option){
p_um <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
uniq_map_r = scanBam(bamfile, param=p_um)[[1]]
uniq_map  <- lapply(uniq_map_r, function(x)x[uniq_map_r$mapq>quality])
length <- bam_length(bamfile)
if (option == "count") return(length(uniq_map$qname))
if (option == "rate") return(length(uniq_map$qname)/length)
}
p_total <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
bam_total <- scanBam(bamfile, param=p_total)[[1]]
bam_total
bam_total$mrnm
table(bam_total$mrnm0
rg
table(bam_total$mrnm）
table(bam_total$mrnm)
bam222 <- load(system.file("extdata", "olaps.Rda", package = "Rsamtools"))
p_total <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag())
bam_222 <- scanBam(bam222, param=p_total)[[1]]
library(multicore)
> olaps <- readBamGappedAlignments(bv)
library(multicore)
olaps <- readBamGappedAlignments(bv)
p_cig <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isUnmappedQuery = FALSE))
cig = scanBam(bamfile, param=p_cig)[[1]]$cigar
cig
bam <- system.file("extdata","sample1Aligned.out.bam",package="dupRadar")
gtf <- "genes.gtf"
stranded <- 2 # '0' (unstranded), '1' (stranded) and '2' (reverse)
paired <- FALSE
threads <- 4
bamDuprm <- markDuplicates(dupremover="bamutil",bam,
path="/opt/bamUtil-master/bin",rminput=FALSE)
